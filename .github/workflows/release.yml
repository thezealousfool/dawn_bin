name: release

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: "10 10 * * *"

permissions:
  contents: write

jobs:
  linux-x86_64-debug:
    name: linux-x86_64-debug
    runs-on: ubuntu-latest
    steps:
      - name: System Dependencies
        run: |
          sudo apt update
          sudo apt install libgl-dev libx11-xcb-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev wayland-protocols libwayland-dev libxkbcommon-dev libtool-bin

      - name: ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: depot_tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: dawn
        run: |
          git clone --depth 1 https://dawn.googlesource.com/dawn dawn
          mkdir dist-debug
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync --no-history --shallow
          mkdir build-debug


      - name: Building
        run: |
          cat << EOF >> build-debug/args.gn
          is_debug=true
          target_cpu="x64"

          dawn_use_wayland=true
          dawn_use_x11=true

          dawn_enable_vulkan=true
          dawn_enable_null=false
          dawn_enable_metal=false
          dawn_use_swiftshader=false
          dawn_tests_use_angle=false
          dawn_enable_spirv_validation=false

          tint_build_benchmarks=false
          tint_build_unittests=false
          tint_build_cmds=false
          tint_build_hlsl_writer=false
          tint_build_ir_binary=false

          is_clang=true
          is_component_build=false
          use_thin_lto=false
          cc_wrapper="sccache"
          dawn_complete_static_libs=true
          use_custom_libcxx=true
          use_custom_libcxx_for_host=false
          use_allocator_shim=false
          EOF
          gn gen build-debug
          find $(pwd)/build-debug -type f -name '*.ninja' -exec sed -i'bk' 's/arflags = -T/arflags = /g' "{}" \;
          autoninja -C build-debug libs webgpu_dawn_static src/dawn/platform:static \
              third_party/partition_alloc/src/partition_alloc:allocator_base \
              third_party/partition_alloc/src/partition_alloc:allocator_core \
              third_party/partition_alloc/src/partition_alloc:allocator_shim \
              third_party/partition_alloc/src/partition_alloc:raw_ptr \
              libc++ libc++abi
          third_party/llvm-build/Release+Asserts/bin/llvm-ar rcs \
              build-debug/obj/buildtools/third_party/libc++/libc++.a \
              build-debug/obj/buildtools/third_party/libc++/libc++/*.o
          third_party/llvm-build/Release+Asserts/bin/llvm-ar rcs \
              build-debug/obj/buildtools/third_party/libc++abi/libc++abi.a \
              build-debug/obj/buildtools/third_party/libc++abi/libc++abi/*.o
          mkdir build-debug/gen/lib
          cp build-debug/obj/src/dawn/common/*.a build-debug/gen/lib
          cp build-debug/obj/src/dawn/native/*.a build-debug/gen/lib
          cp build-debug/obj/src/dawn/platform/*.a build-debug/gen/lib
          cp build-debug/obj/buildtools/third_party/libc++/libc++.a build-debug/gen/lib
          cp build-debug/obj/buildtools/third_party/libc++abi/libc++abi.a build-debug/gen/lib
          cp build-debug/obj/third_party/partition_alloc/src/partition_alloc/*.a build-debug/gen/lib
          cp -r build-debug/gen/include ../dist-debug
          cp -r build-debug/gen/lib ../dist-debug
          rm -rf ../dist-debug/include/dawn/wire
        shell: bash
        working-directory: dawn
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Create archive
        run: |
          sudo apt install p7zip-full
          mkdir dist
          7z a dist/linux-x86_64-debug.zip $(pwd)/dist-debug/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: dist-linux-x86_64-debug

  linux-x86_64-release:
    name: linux-x86_64-release
    runs-on: ubuntu-latest
    steps:
      - name: System Dependencies
        run: |
          sudo apt update
          sudo apt install libgl-dev libx11-xcb-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev wayland-protocols libwayland-dev libxkbcommon-dev libtool-bin

      - name: ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: depot_tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: dawn
        run: |
          git clone --depth 1 https://dawn.googlesource.com/dawn dawn
          mkdir dist-release
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync --no-history --shallow
          mkdir build-release

      - name: Building
        run: |
          cat << EOF >> build-release/args.gn
          is_debug=false
          is_official_build=true
          chrome_pgo_phase=0
          use_icf=true
          enable_dsyms=false
          target_cpu="x64"

          dawn_use_wayland=true
          dawn_use_x11=true

          dawn_enable_vulkan=true
          dawn_enable_null=false
          dawn_enable_metal=false
          dawn_use_swiftshader=false
          dawn_tests_use_angle=false
          dawn_enable_spirv_validation=false

          tint_build_benchmarks=false
          tint_build_unittests=false
          tint_build_cmds=false
          tint_build_hlsl_writer=false
          tint_build_ir_binary=false

          is_clang=true
          is_component_build=false
          is_cfi=false
          use_thin_lto=false
          cc_wrapper="sccache"
          dawn_complete_static_libs=true
          use_custom_libcxx=true
          use_custom_libcxx_for_host=false
          use_allocator_shim=false
          EOF
          gn gen build-release
          find $(pwd)/build-release -type f -name '*.ninja' -exec sed -i'bk' 's/arflags = -T/arflags = /g' "{}" \;
          autoninja -C build-release libs webgpu_dawn_static src/dawn/platform:static \
              third_party/partition_alloc/src/partition_alloc:allocator_base \
              third_party/partition_alloc/src/partition_alloc:allocator_core \
              third_party/partition_alloc/src/partition_alloc:allocator_shim \
              third_party/partition_alloc/src/partition_alloc:raw_ptr \
              libc++ libc++abi
          third_party/llvm-build/Release+Asserts/bin/llvm-ar rcs \
              build-release/obj/buildtools/third_party/libc++/libc++.a \
              build-release/obj/buildtools/third_party/libc++/libc++/*.o
          third_party/llvm-build/Release+Asserts/bin/llvm-ar rcs \
              build-release/obj/buildtools/third_party/libc++abi/libc++abi.a \
              build-release/obj/buildtools/third_party/libc++abi/libc++abi/*.o
          mkdir build-release/gen/lib
          cp build-release/obj/src/dawn/common/*.a build-release/gen/lib
          cp build-release/obj/src/dawn/native/*.a build-release/gen/lib
          cp build-release/obj/src/dawn/platform/*.a build-release/gen/lib
          cp build-release/obj/buildtools/third_party/libc++/libc++.a build-release/gen/lib
          cp build-release/obj/buildtools/third_party/libc++abi/libc++abi.a build-release/gen/lib
          cp build-release/obj/third_party/partition_alloc/src/partition_alloc/*.a build-release/gen/lib
          cp -r build-release/gen/include ../dist-release
          cp -r build-release/gen/lib ../dist-release
          rm -rf ../dist-release/include/dawn/wire
        shell: bash
        working-directory: dawn
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Create archive
        run: |
          sudo apt install p7zip-full
          mkdir dist
          7z a dist/linux-x86_64-release.zip $(pwd)/dist-release/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: dist-linux-x86_64-release

  linux-aarch64-debug:
    name: linux-aarch64-debug
    runs-on: ubuntu-latest
    steps:
      - name: System Dependencies
        run: |
          sudo apt update
          sudo apt install libgl-dev libx11-xcb-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev wayland-protocols libwayland-dev libxkbcommon-dev libtool-bin

      - name: ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: depot_tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: dawn
        run: |
          git clone --depth 1 https://dawn.googlesource.com/dawn dawn
          mkdir dist-debug
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync --no-history --shallow
          build/linux/sysroot_scripts/install-sysroot.py --arch=arm64
          mkdir build-debug

      - name: Building
        run: |
          cat << EOF >> build-debug/args.gn
          is_debug=true
          target_cpu="arm64"

          dawn_use_wayland=true
          dawn_use_x11=true
          dawn_enable_vulkan=true
          dawn_enable_null=false
          dawn_enable_metal=false
          dawn_use_swiftshader=false
          dawn_tests_use_angle=false
          dawn_enable_spirv_validation=false

          tint_build_benchmarks=false
          tint_build_unittests=false
          tint_build_cmds=false
          tint_build_hlsl_writer=false
          tint_build_ir_binary=false

          is_clang=true
          is_component_build=false
          use_thin_lto=false
          cc_wrapper="sccache"
          dawn_complete_static_libs=true
          use_custom_libcxx=true
          use_custom_libcxx_for_host=false
          use_allocator_shim=false
          EOF
          gn gen build-debug
          find $(pwd)/build-debug -type f -name '*.ninja' -exec sed -i'bk' 's/arflags = -T/arflags = /g' "{}" \;
          autoninja -C build-debug libs webgpu_dawn_static src/dawn/platform:static \
              third_party/partition_alloc/src/partition_alloc:allocator_base \
              third_party/partition_alloc/src/partition_alloc:allocator_core \
              third_party/partition_alloc/src/partition_alloc:allocator_shim \
              third_party/partition_alloc/src/partition_alloc:raw_ptr \
              libc++ libc++abi
          third_party/llvm-build/Release+Asserts/bin/llvm-ar rcs \
              build-debug/obj/buildtools/third_party/libc++/libc++.a \
              build-debug/obj/buildtools/third_party/libc++/libc++/*.o
          third_party/llvm-build/Release+Asserts/bin/llvm-ar rcs \
              build-debug/obj/buildtools/third_party/libc++abi/libc++abi.a \
              build-debug/obj/buildtools/third_party/libc++abi/libc++abi/*.o
          mkdir build-debug/gen/lib
          cp build-debug/obj/src/dawn/common/*.a build-debug/gen/lib
          cp build-debug/obj/src/dawn/native/*.a build-debug/gen/lib
          cp build-debug/obj/src/dawn/platform/*.a build-debug/gen/lib
          cp build-debug/obj/buildtools/third_party/libc++/libc++.a build-debug/gen/lib
          cp build-debug/obj/buildtools/third_party/libc++abi/libc++abi.a build-debug/gen/lib
          cp build-debug/obj/third_party/partition_alloc/src/partition_alloc/*.a build-debug/gen/lib
          cp -r build-debug/gen/include ../dist-debug
          cp -r build-debug/gen/lib ../dist-debug
          rm -rf ../dist-debug/include/dawn/wire
        shell: bash
        working-directory: dawn
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Create archive
        run: |
          sudo apt install p7zip-full
          mkdir dist
          7z a dist/linux-aarch64-debug.zip $(pwd)/dist-debug/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: dist-linux-aarch64-debug

  linux-aarch64-release:
    name: linux-aarch64-release
    runs-on: ubuntu-latest
    steps:
      - name: System Dependencies
        run: |
          sudo apt update
          sudo apt install libgl-dev libx11-xcb-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev wayland-protocols libwayland-dev libxkbcommon-dev libtool-bin

      - name: ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: depot_tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: dawn
        run: |
          git clone --depth 1 https://dawn.googlesource.com/dawn dawn
          mkdir dist-release
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync --no-history --shallow
          build/linux/sysroot_scripts/install-sysroot.py --arch=arm64
          mkdir build-release

      - name: Building
        run: |
          cat << EOF >> build-release/args.gn
          is_debug=false
          is_official_build=true
          chrome_pgo_phase=0
          use_icf=true
          enable_dsyms=false
          target_cpu="arm64"

          dawn_use_wayland=true
          dawn_use_x11=true

          dawn_enable_vulkan=true
          dawn_enable_null=false
          dawn_enable_metal=false
          dawn_use_swiftshader=false
          dawn_tests_use_angle=false
          dawn_enable_spirv_validation=false

          tint_build_benchmarks=false
          tint_build_unittests=false
          tint_build_cmds=false
          tint_build_hlsl_writer=false
          tint_build_ir_binary=false

          is_clang=true
          is_component_build=false
          use_thin_lto=false
          cc_wrapper="sccache"
          dawn_complete_static_libs=true
          use_custom_libcxx=true
          use_custom_libcxx_for_host=false
          use_allocator_shim=false
          EOF
          gn gen build-release
          find $(pwd)/build-release -type f -name '*.ninja' -exec sed -i'bk' 's/arflags = -T/arflags = /g' "{}" \;
          autoninja -C build-release libs webgpu_dawn_static src/dawn/platform:static \
              third_party/partition_alloc/src/partition_alloc:allocator_base \
              third_party/partition_alloc/src/partition_alloc:allocator_core \
              third_party/partition_alloc/src/partition_alloc:allocator_shim \
              third_party/partition_alloc/src/partition_alloc:raw_ptr \
              libc++ libc++abi
          third_party/llvm-build/Release+Asserts/bin/llvm-ar rcs \
              build-release/obj/buildtools/third_party/libc++/libc++.a \
              build-release/obj/buildtools/third_party/libc++/libc++/*.o
          third_party/llvm-build/Release+Asserts/bin/llvm-ar rcs \
              build-release/obj/buildtools/third_party/libc++abi/libc++abi.a \
              build-release/obj/buildtools/third_party/libc++abi/libc++abi/*.o
          mkdir build-release/gen/lib
          cp build-release/obj/src/dawn/common/*.a build-release/gen/lib
          cp build-release/obj/src/dawn/native/*.a build-release/gen/lib
          cp build-release/obj/src/dawn/platform/*.a build-release/gen/lib
          cp build-release/obj/buildtools/third_party/libc++/libc++.a build-release/gen/lib
          cp build-release/obj/buildtools/third_party/libc++abi/libc++abi.a build-release/gen/lib
          cp build-release/obj/third_party/partition_alloc/src/partition_alloc/*.a build-release/gen/lib
          cp -r build-release/gen/include ../dist-release
          cp -r build-release/gen/lib ../dist-release
          rm -rf ../dist-release/include/dawn/wire
        shell: bash
        working-directory: dawn
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Create archive
        run: |
          sudo apt install p7zip-full
          mkdir dist
          7z a dist/linux-aarch64-release.zip $(pwd)/dist-release/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: dist-linux-aarch64-release

  macos-aarch64-debug:
    name: macos-aarch64-debug
    runs-on: macos-latest
    steps:
      - name: ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: depot_tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: dawn
        run: |
          git clone --depth 1 https://dawn.googlesource.com/dawn dawn
          mkdir dist-debug
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync --no-history --shallow
          mkdir build-debug
          brew install libtool

      - name: Building
        run: |
          cat << EOF >> build-debug/args.gn
          is_debug=true
          target_cpu="arm64"

          use_system_xcode=true
          mac_deployment_target="12.0"
          mac_min_system_version="12.0"
          mac_sdk_min="12.0"

          dawn_enable_vulkan=false
          dawn_enable_null=false
          dawn_enable_metal=true
          dawn_use_swiftshader=false
          dawn_tests_use_angle=false
          dawn_enable_spirv_validation=false

          tint_build_benchmarks=false
          tint_build_unittests=false
          tint_build_cmds=false
          tint_build_glsl_writer=false
          tint_build_glsl_validator=false
          tint_build_hlsl_writer=false
          tint_build_ir_binary=false

          is_clang=true
          is_component_build=false
          use_thin_lto=false
          cc_wrapper="sccache"
          dawn_complete_static_libs=true
          use_custom_libcxx=false
          use_allocator_shim=false
          EOF
          gn gen build-debug
          find $(pwd)/build-debug -type f -name '*.ninja' -exec sed -i'bk' 's/arflags = -T/arflags = /g' "{}" \;
          autoninja -C build-debug libs webgpu_dawn_static src/dawn/platform:static \
              third_party/partition_alloc/src/partition_alloc:allocator_base \
              third_party/partition_alloc/src/partition_alloc:allocator_core \
              third_party/partition_alloc/src/partition_alloc:allocator_shim \
              third_party/partition_alloc/src/partition_alloc:raw_ptr
          mkdir build-debug/gen/lib
          cp build-debug/obj/src/dawn/common/*.a build-debug/gen/lib
          cp build-debug/obj/src/dawn/native/*.a build-debug/gen/lib
          cp build-debug/obj/src/dawn/platform/*.a build-debug/gen/lib
          cp build-debug/obj/third_party/partition_alloc/src/partition_alloc/*.a build-debug/gen/lib
          cp -r build-debug/gen/include ../dist-debug
          cp -r build-debug/gen/lib ../dist-debug
          rm -rf ../dist-debug/include/dawn/wire
        shell: bash
        working-directory: dawn
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Create archive
        run: |
          mkdir dist
          7z a dist/macos-aarch64-debug.zip $(pwd)/dist-debug/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: dist-macos-aarch64-debug

  macos-aarch64-release:
    name: macos-aarch64-release
    runs-on: macos-latest
    steps:
      - name: ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: depot_tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: dawn
        run: |
          git clone --depth 1 https://dawn.googlesource.com/dawn dawn
          mkdir dist-release
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync --no-history --shallow
          mkdir build-release
          brew install libtool

      - name: Building
        run: |
          cat << EOF >> build-release/args.gn
          is_debug=false
          is_official_build=true
          chrome_pgo_phase=0
          use_icf=true
          enable_dsyms=false

          use_system_xcode=true
          mac_deployment_target="12.0"
          mac_min_system_version="12.0"
          mac_sdk_min="12.0"
          target_cpu="arm64"

          dawn_enable_vulkan=false
          dawn_enable_null=false
          dawn_enable_metal=true
          dawn_use_swiftshader=false
          dawn_tests_use_angle=false
          dawn_enable_spirv_validation=false

          tint_build_benchmarks=false
          tint_build_unittests=false
          tint_build_cmds=false
          tint_build_glsl_writer=false
          tint_build_glsl_validator=false
          tint_build_hlsl_writer=false
          tint_build_ir_binary=false

          is_clang=true
          is_component_build=false
          use_thin_lto=false
          cc_wrapper="sccache"
          dawn_complete_static_libs=true
          use_custom_libcxx=false
          use_allocator_shim=false
          EOF
          gn gen build-release
          find $(pwd)/build-release -type f -name '*.ninja' -exec sed -i'bk' 's/arflags = -T/arflags = /g' "{}" \;
          autoninja -C build-release libs webgpu_dawn_static src/dawn/platform:static \
              third_party/partition_alloc/src/partition_alloc:allocator_base \
              third_party/partition_alloc/src/partition_alloc:allocator_core \
              third_party/partition_alloc/src/partition_alloc:allocator_shim \
              third_party/partition_alloc/src/partition_alloc:raw_ptr
          mkdir build-release/gen/lib
          cp build-release/obj/src/dawn/common/*.a build-release/gen/lib
          cp build-release/obj/src/dawn/native/*.a build-release/gen/lib
          cp build-release/obj/src/dawn/platform/*.a build-release/gen/lib
          cp build-release/obj/third_party/partition_alloc/src/partition_alloc/*.a build-release/gen/lib
          cp -r build-release/gen/include ../dist-release
          cp -r build-release/gen/lib ../dist-release
          rm -rf ../dist-release/include/dawn/wire
        shell: bash
        working-directory: dawn
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Create archive
        run: |
          mkdir dist
          7z a dist/macos-aarch64-release.zip $(pwd)/dist-release/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: dist-macos-aarch64-release

  macos-x86_64-debug:
    name: macos-x86_64-debug
    runs-on: macos-latest
    steps:
      - name: ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: depot_tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: dawn
        run: |
          git clone --depth 1 https://dawn.googlesource.com/dawn dawn
          mkdir dist-debug
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync --no-history --shallow
          mkdir build-debug
          brew install libtool

      - name: Building
        run: |
          cat << EOF >> build-debug/args.gn
          is_debug=true
          target_cpu="x64"

          use_system_xcode=true
          mac_deployment_target="12.0"
          mac_min_system_version="12.0"
          mac_sdk_min="12.0"

          dawn_enable_vulkan=false
          dawn_enable_null=false
          dawn_enable_metal=true
          dawn_use_swiftshader=false
          dawn_tests_use_angle=false
          dawn_enable_spirv_validation=false

          tint_build_benchmarks=false
          tint_build_unittests=false
          tint_build_cmds=false
          tint_build_glsl_writer=false
          tint_build_glsl_validator=false
          tint_build_hlsl_writer=false
          tint_build_ir_binary=false

          is_clang=true
          is_component_build=false
          use_thin_lto=false
          cc_wrapper="sccache"
          dawn_complete_static_libs=true
          use_custom_libcxx=false
          use_allocator_shim=false
          EOF
          gn gen build-debug
          find $(pwd)/build-debug -type f -name '*.ninja' -exec sed -i'bk' 's/arflags = -T/arflags = /g' "{}" \;
          autoninja -C build-debug libs webgpu_dawn_static src/dawn/platform:static \
              third_party/partition_alloc/src/partition_alloc:allocator_base \
              third_party/partition_alloc/src/partition_alloc:allocator_core \
              third_party/partition_alloc/src/partition_alloc:allocator_shim \
              third_party/partition_alloc/src/partition_alloc:raw_ptr
          mkdir build-debug/gen/lib
          cp build-debug/obj/src/dawn/common/*.a build-debug/gen/lib
          cp build-debug/obj/src/dawn/native/*.a build-debug/gen/lib
          cp build-debug/obj/src/dawn/platform/*.a build-debug/gen/lib
          cp build-debug/obj/third_party/partition_alloc/src/partition_alloc/*.a build-debug/gen/lib
          cp -r build-debug/gen/include ../dist-debug
          cp -r build-debug/gen/lib ../dist-debug
          rm -rf ../dist-debug/include/dawn/wire
        shell: bash
        working-directory: dawn
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Create archive
        run: |
          mkdir dist
          7z a dist/macos-x86_64-debug.zip $(pwd)/dist-debug/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: dist-macos-x86_64-debug

  macos-x86_64-release:
    name: macos-x86_64-release
    runs-on: macos-latest
    steps:
      - name: ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: depot_tools
        uses: newkdev/setup-depot-tools@v1.0.1

      - name: dawn
        run: |
          git clone --depth 1 https://dawn.googlesource.com/dawn dawn
          mkdir dist-release
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync --no-history --shallow
          mkdir build-release
          brew install libtool

      - name: Building
        run: |
          cat << EOF >> build-release/args.gn
          is_debug=false
          is_official_build=true
          chrome_pgo_phase=0
          use_icf=true
          enable_dsyms=false
          target_cpu="x64"

          use_system_xcode=true
          mac_deployment_target="12.0"
          mac_min_system_version="12.0"
          mac_sdk_min="12.0"

          dawn_enable_vulkan=false
          dawn_enable_null=false
          dawn_enable_metal=true
          dawn_use_swiftshader=false
          dawn_tests_use_angle=false
          dawn_enable_spirv_validation=false

          tint_build_benchmarks=false
          tint_build_unittests=false
          tint_build_cmds=false
          tint_build_glsl_writer=false
          tint_build_glsl_validator=false
          tint_build_hlsl_writer=false
          tint_build_ir_binary=false

          is_clang=true
          is_component_build=false
          use_thin_lto=false
          cc_wrapper="sccache"
          dawn_complete_static_libs=true
          use_custom_libcxx=false
          use_allocator_shim=false
          EOF
          gn gen build-release
          find $(pwd)/build-release -type f -name '*.ninja' -exec sed -i'bk' 's/arflags = -T/arflags = /g' "{}" \;
          autoninja -C build-release libs webgpu_dawn_static src/dawn/platform:static \
              third_party/partition_alloc/src/partition_alloc:allocator_base \
              third_party/partition_alloc/src/partition_alloc:allocator_core \
              third_party/partition_alloc/src/partition_alloc:allocator_shim \
              third_party/partition_alloc/src/partition_alloc:raw_ptr
          mkdir build-release/gen/lib
          cp build-release/obj/src/dawn/common/*.a build-release/gen/lib
          cp build-release/obj/src/dawn/native/*.a build-release/gen/lib
          cp build-release/obj/src/dawn/platform/*.a build-release/gen/lib
          cp build-release/obj/third_party/partition_alloc/src/partition_alloc/*.a build-release/gen/lib
          cp -r build-release/gen/include ../dist-release
          cp -r build-release/gen/lib ../dist-release
          rm -rf ../dist-release/include/dawn/wire
        shell: bash
        working-directory: dawn
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: Create archive
        run: |
          mkdir dist
          7z a dist/macos-x86_64-release.zip $(pwd)/dist-release/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: dist-macos-x86_64-release

  publish:
    name: Publish Github release
    needs:
      - linux-x86_64-debug
      - linux-x86_64-release
      - linux-aarch64-debug
      - linux-aarch64-release
      - macos-aarch64-debug
      - macos-aarch64-release
      - macos-x86_64-debug
      - macos-x86_64-release
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Set Version
        run: |
          echo "RELEASE_VERSION=$(date '+%Y%m%d')" >> $GITHUB_ENV
        shell: bash
      - name: Download assets - linux-x86_64-debug
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-x86_64-debug
          path: dist
      - name: Download assets - linux-x86_64-release
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-x86_64-release
          path: dist
      - name: Download assets - linux-aarch64-debug
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-aarch64-debug
          path: dist
      - name: Download assets - linux-aarch64-release
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-aarch64-release
          path: dist
      - name: Download assets - macos-aarch64-debug
        uses: actions/download-artifact@v4
        with:
          name: dist-macos-aarch64-debug
          path: dist
      - name: Download assets - macos-aarch64-release
        uses: actions/download-artifact@v4
        with:
          name: dist-macos-aarch64-release
          path: dist
      - name: Download assets - macos-x86_64-debug
        uses: actions/download-artifact@v4
        with:
          name: dist-macos-x86_64-debug
          path: dist
      - name: Download assets - macos-x86_64-release
        uses: actions/download-artifact@v4
        with:
          name: dist-macos-x86_64-release
          path: dist
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Dawn Release ${{ env.RELEASE_VERSION }}
          files: |
            dist/*.zip
          draft: false
          prerelease: false
